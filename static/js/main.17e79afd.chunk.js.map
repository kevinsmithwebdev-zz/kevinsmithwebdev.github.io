{"version":3,"sources":["package/Lectorem/Lect/Lect.js","package/Lectorem/Player/Player.js","package/Lectorem/Lectorem.js","components/Story/Story.js","components/App.js","serviceWorker.js","index.js"],"names":["endingPunctuation","Lect","text","lect","shouldHighlight","className","readTime","join","lastChar","slice","spacer","includes","Player","props","listenInterval","onListen","src","audioPath","controlsList","controls","renderLect","idx","start","end","key","renderParagraphs","paragraphs","map","paragraph","header","lects","imagePath","alt","width","renderParagraph","Lectorem","data","useState","setReadTime","title","subtitle","Story","setData","useEffect","fetch","then","d","json","catch","e","console","error","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uTAGMA,G,MAAoB,CAAC,IAAK,IAAK,MAiBtBC,EAfF,SAAC,GAAmD,IAAzCC,EAAwC,EAAhDC,KAAQD,KAAQE,EAAgC,EAAhCA,gBACxBC,GADwD,EAAfC,SAC7B,CAChB,OACAF,EAAkB,cAAgB,iBAClCG,KAAK,MACDC,EAAWN,EAAKO,OAAO,GAEvBC,EADwBV,EAAkBW,SAASH,GAClB,KAAO,IAC9C,OACE,0BAAMH,UAAYA,GAAlB,UACOH,GADP,OACcQ,K,gBCKHE,G,MAdA,SAAAC,GACb,OACE,yBAAKR,UAAU,UACb,kBAAC,IAAD,CACES,eANsB,IAOtBC,SAAWF,EAAME,SACjBC,IAAMH,EAAMI,UACZC,aAAa,aACbC,UAAQ,OCTVC,G,MAAa,SAACjB,EAAMkB,EAAKf,GAC7B,IAAMF,EAAkBD,EAAKmB,OAAShB,GAAYA,GAAYH,EAAKoB,IAC7DC,EAAMpB,EAAkBE,EAAWe,EACzC,OAAO,kBAAC,EAAD,CAAMlB,KAAOA,EAAOC,gBAAkBA,EAAkBoB,IAAMA,EAAMlB,SAAWA,MAiBlFmB,EAAmB,SAACC,EAAYpB,GAAb,OACvBoB,EAAWC,KAAI,SAACC,EAAWP,GAAZ,OAfO,SAAC,EAAmBA,EAAKf,GAAzB,IAAGuB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,OACtB,yBAAKzB,UAAU,YAAYmB,IAAMH,GAC/B,yBAAKhB,UAAU,6BACb,6BACE,yBAAKW,IAAKa,EAAOE,UAAWC,IAAI,OAAOC,MAAM,WAE7CJ,EAAOC,MAAMH,KAAI,SAACxB,EAAMkB,GAAP,OAAeD,EAAWjB,EAAMkB,EAAKf,OAE1D,6BACIwB,EAAMH,KAAI,SAACxB,EAAMkB,GAAP,OAAeD,EAAWjB,EAAMkB,EAAKf,QAMlB4B,CAAgBN,EAAWP,EAAKf,OA2BtD6B,EAzBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACGC,mBAAS,GADZ,mBACtB/B,EADsB,KACZgC,EADY,KAG7B,IAAKF,EACH,OAAO,yCAJoB,IAOrBG,EAA+BH,EAA/BG,MAAOC,EAAwBJ,EAAxBI,SAAUvB,EAAcmB,EAAdnB,UACzB,OACE,yBAAKZ,UAAU,cACTkC,GAAS,4BAAMA,EAAN,OACTC,GAAY,4BAAMA,EAAN,KAChB,yBAAKnC,UAAU,mBACb,kBAAC,EAAD,CACEY,UAAYA,EACZF,SAAWuB,KAGf,yBAAKjC,UAAU,kBACXoB,EAAiBW,EAAKV,WAAYpB,MCrB7BmC,G,MApBD,WAAO,IAAD,EACMJ,qBADN,mBACXD,EADW,KACLM,EADK,KAWlB,OAFAC,qBAPgB,WACdC,MALa,gCAMVC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GAAC,OAAIJ,EAAQI,MAClBE,OAAM,SAAAC,GAAC,OAAIC,QAAQC,MAAMF,QAGX,IAGjB,yBAAK5C,UAAU,SACb,kBAAC,EAAD,CACE+B,KAAOA,OCPAgB,G,MATH,WACV,OACE,yBAAK/C,UAAU,OACb,oDACA,kBAAC,EAAD,SCIcgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMiB,c","file":"static/js/main.17e79afd.chunk.js","sourcesContent":["import React from 'react';\nimport './Lect.css';\n\nconst endingPunctuation = ['.', '!', '?'];\n\nconst Lect = ({ lect: { text }, shouldHighlight, readTime }) => {\n  const className = [\n    'Lect',\n    shouldHighlight ? 'highlighted' : 'unHighlighted',\n  ].join(' ');\n  const lastChar = text.slice(-1);\n  const isEndingInPunctuation = endingPunctuation.includes(lastChar);\n  const spacer = isEndingInPunctuation ? '  ' : ' ';\n  return (\n    <span className={ className } >\n      { `${text}${spacer}` }\n    </span>\n  );\n};\n\nexport default Lect;\n","import React from \"react\";\nimport ReactAudioPlayer from 'react-audio-player';\nimport './Player.css';\n\nconst LISTEN_INTERVAL_IN_MS = 100;\n\nconst Player = props => {\n  return (\n    <div className='Player'>\n      <ReactAudioPlayer\n        listenInterval={ LISTEN_INTERVAL_IN_MS }\n        onListen={ props.onListen }\n        src={ props.audioPath }\n        controlsList='nodownload'\n        controls\n      />\n    </div>\n  );\n}\n\nexport default Player;\n","import React, { useState } from 'react';\nimport Lect from './Lect/Lect';\nimport Player from './Player/Player';\nimport './Lectorem.css';\n\nconst renderLect = (lect, idx, readTime) => {\n  const shouldHighlight = lect.start <= readTime && readTime <= lect.end;\n  const key = shouldHighlight ? readTime : idx;\n  return <Lect lect={ lect } shouldHighlight={ shouldHighlight } key={ key } readTime={ readTime } />\n};\n\nconst renderParagraph = ({ header, lects }, idx, readTime) => (\n  <div className='paragraph' key={ idx }>\n    <div className='Lectorem-paragraph-header'>\n      <div>\n        <img src={header.imagePath} alt='Logo' width='150px' />\n      </div>\n      { header.lects.map((lect, idx) => renderLect(lect, idx, readTime)) }\n    </div>\n    <div>\n      { lects.map((lect, idx) => renderLect(lect, idx, readTime)) }\n    </div>\n  </div>\n);\n\nconst renderParagraphs = (paragraphs, readTime) =>\n  paragraphs.map((paragraph, idx) => renderParagraph(paragraph, idx, readTime));\n\nconst Lectorem = ({ data }) => {\n  const [readTime, setReadTime] = useState(0);\n\n  if (!data) {\n    return <p>Loading...</p>;\n  }\n\n  const { title, subtitle, audioPath } = data;\n  return (\n    <div className='Lectorem'>\n      { !!title && <h2>{ title } </h2> }\n      { !!subtitle && <h3>{ subtitle } </h3> }\n      <div className='playerContainer'>\n        <Player\n          audioPath={ audioPath }\n          onListen={ setReadTime }\n        />\n      </div>\n      <div className='lectsContainer'>\n        { renderParagraphs(data.paragraphs, readTime) }\n      </div>\n    </div>\n  );\n}\n\nexport default Lectorem;\n","import React, { useEffect, useState } from 'react';\nimport Lectorem from '../../package/Lectorem/Lectorem';\nimport './Story.css';\n\nconst dataPath = 'data/stories/burro/data.json';\n\nconst Story = () => {\n  const [data, setData] = useState();\n  const onMount = () => {\n    fetch(dataPath)\n      .then(d => d.json())\n      .then(d => setData(d))\n      .catch(e => console.error(e));\n  };\n\n  useEffect(onMount, []);\n\n  return (\n    <div className='Story'>\n      <Lectorem\n        data={ data }\n      />\n    </div>\n  );\n};\n\nexport default Story;","import React from 'react';\nimport Story from './Story/Story';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>Spanish Reading Demo</h1>\n      <Story />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}